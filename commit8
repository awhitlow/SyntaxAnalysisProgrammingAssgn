#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

/*Global variable declarations*/
int charClass;
char lexeme [100];
char nextChar;
int lexLen;
int token;
int nextToken
FILE *in_fp, *fopen();

/*Function declarations*/
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char);

/*Functions for lexical analyzer*/
void expr();
void term();
void factor();

/*Function to provide error message*/
void error();

/*Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

/*Token codes*/
#define INT_LIT 10
#define IDENT 11
#define ADD_OP 21
#define SUB_OP 22
#define DIV_OP 24
#define MULT_OP 23
#define ASSIGN_OP 20
#define LEFT_PAREN 25
#define RIGHT_PAREN 26

int main()
{
    //Open file
    if((in_fp = fopen("front.in", "r")) == NULL)
        printf("ERROR - cannot open file \n");
    //Get the first character from the file
    else{
        getChar();
        //Do this until the end of the file is reached:
        do {
          //call the lex function to determine what to do with the specific character type
            lex();
          //call the expr() function to determine the parsing for the lexeme
            expr();
        } while(nextToken != EOF);
    }
}

//Function to get character and decide which character class it belongs to 
void getChar(){
    //If the next character in the input is not the end of the file
    if((nextChar = getc(in_fp)) != EOF){
        //If the character is of type alpha, the character class is set to LETTER
        if(isalpha(nextChar))
            charClass = LETTER;
        //If the character is of type digit, the character class is set to DIGIT
        else if (isdigit(nextChar))
            charClass = DIGIT;
            //If the character is neither alpha or numeric, its type is unknown 
            else charClass = UNKNOWN;
        }
        //If the character is the end of file, it is set to EOF
        else
            charClass = EOF;
}

//Function that acts as a lexical analyzer
int lex(){
    //lexeme length is set to 0 
    lexLen = 0;
    //Function to skip over blank characters is called 
    getNonBlank();
    //switch statement to parse the different character types
    switch(charClass){
    //if the character is of type LETTER
    case LETTER:
        //Add the next character to the lexeme
        addChar();
        //Get the next character
        getChar();
        //While the character class is either LETTER or DIGIT, add the character to the lexeme and get the next character
        while (charClass == LETTER || charClass == DIGIT){
            addChar();
            getChar();
        }
    //The nextToken is set to be an identifier
    nextToken = IDENT;
    break;
