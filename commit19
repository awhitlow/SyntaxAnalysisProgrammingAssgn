#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

/*Global variable declarations*/
int charClass;
char line[60];
char lexeme [100];
//char *line = NULL;
//size_t len = 0;
//ssize_t read;
char nextChar;
int lexLen;
int token;
int nextToken;

FILE *in_fp, * fptr, *fopen();

/*Function declaration*/
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char);
void getLine();

/*Functions for lexical analyzer*/
void expr();
void term();
void factor();

/*Function to provide error message*/
void error();

/*Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

/*Token codes*/
#define INT_LIT 10
#define IDENT 11
#define ADD_OP 21
#define SUB_OP 22
#define DIV_OP 24
#define MULT_OP 23
#define ASSIGN_OP 20
#define LEFT_PAREN 25
#define RIGHT_PAREN 26

int main()
{
    //open file
    if((fptr = fopen("front.in" , "r")) == NULL)
        printf("ERROR - cannot open file \n");
    //
    else{
        getLine();
        do {
            lex();
            expr();
        } while(nextToken != EOF);
    }
}

/*void getLine(){
    while ((read = getline(&line, &len, fptr)) != -1){
        getChar(&line);
    }
    fclose(fptr);
    if(line)
        free(line);
    exit(EXIT_SUCCESS);
}
*/

void getLine(){
    if(fgets (line, 60, fptr)!=NULL ) {
      getChar(line);
   }
   fclose(fptr);
}
void getNonBlank(){
    while (isspace(nextChar))
        getChar();
}

void getChar(char line[]){
    if((nextChar = getc(fptr)) != EOF){
        if(isalpha(nextChar))
            charClass = LETTER;
        else if (isdigit(nextChar))
            charClass = DIGIT;
        else charClass = UNKNOWN;
    }
    else
        charClass = EOF;
}

void addChar(){
    if (lexLen <= 98){
        lexeme[lexLen++] = nextChar;
        lexeme[lexLen] = 0;
    }
    else
        printf("Error - lexeme is too long \n");
}

int lex(){
    lexLen = 0;
    getNonBlank();
    switch(charClass){
    case LETTER:
        addChar();
        getChar(line);
        while (charClass == LETTER || charClass == DIGIT){
            addChar();
            getChar(line);
        }
    nextToken = IDENT;
    break;

    case DIGIT:
        addChar();
        getChar(line);
        while (charClass == DIGIT){
            addChar();
            getChar(line);
        }
        nextToken = INT_LIT;
        break;

    case UNKNOWN:
        lookup(nextChar);
        getChar(line);
        break;

    case EOF:
        nextToken = EOF;
        lexeme[0] = 'E';
        lexeme[1] = 'O';
        lexeme[2] = 'F';
        lexeme[3] = 0;
        break;
    }
    printf("Next token is: %d, Next lexeme is %s\n", nextToken, lexeme);
    return nextToken;
}

int lookup(char ch){
    switch (ch){
    case '(':
        addChar();
        nextToken = LEFT_PAREN;
        break;

    case ')':
        addChar();
        nextToken = RIGHT_PAREN;
        break;

    case '+':
        addChar();
        nextToken = ADD_OP;
        break;

    case '-':
        addChar();
        nextToken = SUB_OP;
        break;

    case '*':
        addChar();
        nextToken = MULT_OP;
        break;

    case '/':
        addChar();
        nextToken = DIV_OP;
        break;

    default:
        addChar();
        nextToken = EOF;
        break;
    }
    return nextToken;
}

void expr(){
    printf("Enter <expr>\n");
    term();
    while(nextToken == ADD_OP || nextToken == SUB_OP){
        lex();
        term();
    }
    printf("Exit <expr>\n");
}

void term(){
    printf("Enter <term>\n");
    factor();
    while(nextToken == MULT_OP || nextToken == DIV_OP){
        lex();
        factor();
    }
    printf("Exit <term>\n");
}

void factor(){
    printf("Enter <factor>\n");
    if (nextToken == IDENT || nextToken == INT_LIT)
        lex();
    else{
        if (nextToken == LEFT_PAREN){
            lex();
            expr();
            if (nextToken == RIGHT_PAREN)
                lex();
            else
                error();
        }
        else
            error();
    }
    printf("Exit <factor>\n");
}

void error(){
    printf("Error - Character Unrecognizable\n");
    if((nextChar = getc(in_fp)) != EOF){
        //go to next character
        getChar(line);
        lex();
    }
    else{
        nextChar = EOF;
        lex();
    }

}

