#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

/*Global variable declarations*/
int charClass;
char lexeme [100];
char nextChar;
int lexLen;
int token;
int nextToken
FILE *in_fp, *fopen();

/*Function declarations*/
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char);

/*Functions for lexical analyzer*/
void expr();
void term();
void factor();

/*Function to provide error message*/
void error();

/*Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

/*Token codes*/
#define INT_LIT 10
#define IDENT 11
#define ADD_OP 21
#define SUB_OP 22
#define DIV_OP 24
#define MULT_OP 23
#define ASSIGN_OP 20
#define LEFT_PAREN 25
#define RIGHT_PAREN 26

int main()
{
    //Open file
    if((in_fp = fopen("front.in", "r")) == NULL)
        printf("ERROR - cannot open file \n");
    //Get the first character from the file
    else{
        getChar();
        //Do this until the end of the file is reached:
        do {
          //call the lex function to determine what to do with the specific character type
            lex();
          //call the expr() function to determine the parsing for the lexeme
            expr();
        } while(nextToken != EOF);
    }
}

//Function to get character and decide which character class it belongs to 
void getChar(){
    //If the next character in the input is not the end of the file
    if((nextChar = getc(in_fp)) != EOF){
        //If the character is of type alpha, the character class is set to LETTER
        if(isalpha(nextChar))
            charClass = LETTER;
        //If the character is of type digit, the character class is set to DIGIT
        else if (isdigit(nextChar))
            charClass = DIGIT;
            //If the character is neither alpha or numeric, its type is unknown 
            else charClass = UNKNOWN;
        }
        //If the character is the end of file, it is set to EOF
        else
            charClass = EOF;
}

//Function that acts as a lexical analyzer
int lex(){
    //lexeme length is set to 0 
    lexLen = 0;
    //Function to skip over blank characters is called 
    getNonBlank();
    //switch statement to parse the different character types
    
    switch(charClass){
    //if the character is of type LETTER
    case LETTER:
        //Add the next character to the lexeme
        addChar();
        //Get the next character
        getChar();
        //While the character class is either LETTER or DIGIT, add the character to the lexeme and get the next character
        while (charClass == LETTER || charClass == DIGIT){
            addChar();
            getChar();
        }
    //The next token is set to be an identifier
    nextToken = IDENT;
    break;
    
    //If the character is of type DIGIT
    case DIGIT:
        //Add the next character to the lexeme
        addChar();
        //Get the next character from the file
        getChar();
        //While the character class is of type DIGIT
        while (charClass == DIGIT){
            //Add the next character to the lexeme
            addChar();
            //Get the next character from the file
            getChar();
        }
        //The next token is set to be an integer literal 
        nextToken = INT_LIT;
        break;
        
    //If the character type is unknown    
    case UNKNOWN:
        //Call function to lookup function to determine which type of character the unknown char is
        lookup(nextChar);
        //Get the next character from the file 
        getChar();
        break;
    
    //If the character is EOF
    case EOF:
        //The next token will also equal EOF 
        nextToken = EOF;
        //Lexeme 0 is set to E
        lexeme[0] = 'E';
        //Lexeme 1 is set to O
        lexeme[1] = 'O';
        //Lexeme 2 is set to F
        lexeme[2] = 'F';
        //Lexeme 3 is set to 0
        lexeme[3] = 0;
        break;
    }
    printf("Next token is: %d, Next lexeme is %s\n", nextToken, lexeme);
    return nextToken;
}

//Function to look up the token that pairs with a particular character
int lookup(char ch){
    switch (ch){
    //If the character is a left parenthesis
    case '(':
        //Add the character to the lexeme
        addChar();
        //Set the next token equal to  LEFT_PAREN 
        nextToken = LEFT_PAREN;
        break;
         
    //If the character is a right parenthesis
    case ')':
        //Add the character to the lexeme
        addChar();
        //Set the next token equal to RIGHT_PAREN
        nextToken = RIGHT_PAREN;
        break;
        
    //If the character is an addition symbol
    case '+':
        //Add the character to the lexeme
        addChar();
        //Set the token equal to ADD_OP
        nextToken = ADD_OP;
        break;
    
    //If the character is a subtraction operator
    case '-':
        //Add the character to the lexeme
        addChar();
        //Set the token equal to SUB_OP
        nextToken = SUB_OP;
        break;
    
    //If the character is a multiplication opertor
    case '*':
        //Add the character to the lexeme
        addChar();
        //Set the token equal to to MULT_OP
        nextToken = MULT_OP;
        break;
        
     //If the character is a division opertor   
     case '/':
        //Add the character to the lexeme
        addChar();
        //Set the token equal to to DIV_OP
        nextToken = DIV_OP;
        break;
        
    //If the character is the EOF 
    default:
        //Add the character to the lexeme
        addChar();
        //Set the next token equal to EOF
        nextToken = EOF;
        break;
    }
    return nextToken;
}

//Function to parse expressions 
void expr(){
    //Display this line 
    printf("Enter <expr>\n");
    //Call the term function
    term();
    //While the next token is either an add or subtract operator
    //call the lex and term functions 
    while(nextToken == ADD_OP || nextToken == SUB_OP){
        lex();
        term();
    }
    //Print an exit message once no longer within the "expr" non-terminal
    printf("Exit <expr>\n");
}

void term(){
    //Display this line 
    printf("Enter <term>\n");
    //Call the factor function (tbd)
    factor();
    //While the next token is either a multiplication or division operator
    //call the lex and factor functions 
    while(nextToken == MULT_OP || nextToken == DIV_OP){
        lex();
        factor();
    }
    printf("Exit <term>\n");
}

void factor(){
    //Display this line 
    printf("Enter <factor>\n");
    //If the next token is an identifier or integer literal, call the lex function
    if (nextToken == IDENT || nextToken == INT_LIT)
        lex();
    //If the next token is a left parenthesis
    else{
        if (nextToken == LEFT_PAREN){
            //call the lex and expr functions
            lex();
            expr();
